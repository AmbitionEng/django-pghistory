# Generated by Django 4.2.6 on 2025-04-21 18:12

from django.db import migrations
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    dependencies = [
        ("tests", "0016_condstatement_condstatementevent_and_more"),
    ]

    operations = [
        pgtrigger.migrations.RemoveTrigger(
            model_name="denormcontextstatement",
            name="snapshot_no_id_insert_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="denormcontextstatement",
            name="insert_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="eventmodelstatement",
            name="model_create_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="eventmodelstatement",
            name="before_delete_delete",
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="denormcontextstatement",
            trigger=pgtrigger.compiler.Trigger(
                name="snapshot_no_id_insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='WITH _pgh_attached_context AS ( SELECT _pgh_attach_context() AS value ) INSERT INTO "tests_denormcontexteventnoidstatement" ("fk_field_id", "id", "int_field", "pgh_context", "pgh_created_at", "pgh_label", "pgh_obj_id") SELECT new_values."fk_field_id", new_values."id", new_values."int_field", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, NOW(), \'snapshot_no_id_insert\', new_values."id" FROM ( SELECT new_values.* FROM new_values  ) AS new_values, _pgh_attached_context; RETURN NULL;',
                    hash="af58c1947d32a3994b8c335741de2099deac7a8b",
                    level="STATEMENT",
                    operation="INSERT",
                    pgid="pgtrigger_snapshot_no_id_insert_insert_182ba",
                    referencing="REFERENCING NEW TABLE AS new_values ",
                    table="tests_denormcontextstatement",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="denormcontextstatement",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='WITH _pgh_attached_context AS ( SELECT _pgh_attach_context() AS value ) INSERT INTO "tests_denormcontextstatementevent" ("fk_field_id", "id", "int_field", "pgh_context", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") SELECT new_values."fk_field_id", new_values."id", new_values."int_field", COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_metadata\', TRUE), \'\'), NULL)::JSONB, COALESCE(NULLIF(CURRENT_SETTING(\'pghistory.context_id\', TRUE), \'\'), NULL)::UUID, NOW(), \'insert\', new_values."id" FROM ( SELECT new_values.* FROM new_values  ) AS new_values, _pgh_attached_context; RETURN NULL;',
                    hash="571508f6b881f0526b1a57c8008b6cd2fb595b6a",
                    level="STATEMENT",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_0fdb0",
                    referencing="REFERENCING NEW TABLE AS new_values ",
                    table="tests_denormcontextstatement",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="eventmodelstatement",
            trigger=pgtrigger.compiler.Trigger(
                name="model_create_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='WITH _pgh_attached_context AS ( SELECT _pgh_attach_context() AS value ) INSERT INTO "tests_eventmodelstatementevent" ("dt_field", "id", "int_field", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") SELECT new_values."dt_field", new_values."id", new_values."int_field", _pgh_attached_context.value, NOW(), \'model.create\', new_values."id" FROM ( SELECT new_values.* FROM new_values  ) AS new_values, _pgh_attached_context; RETURN NULL;',
                    hash="d9fa3b98442d40801e202c1dd07435d44ad17740",
                    level="STATEMENT",
                    operation="INSERT",
                    pgid="pgtrigger_model_create_insert_9bbc0",
                    referencing="REFERENCING NEW TABLE AS new_values ",
                    table="tests_eventmodelstatement",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="eventmodelstatement",
            trigger=pgtrigger.compiler.Trigger(
                name="before_delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='WITH _pgh_attached_context AS ( SELECT _pgh_attach_context() AS value ) INSERT INTO "tests_eventmodelstatementevent" ("dt_field", "id", "int_field", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") SELECT old_values."dt_field", old_values."id", old_values."int_field", _pgh_attached_context.value, NOW(), \'before_delete\', old_values."id" FROM ( SELECT old_values.* FROM old_values  ) AS old_values, _pgh_attached_context; RETURN NULL;',
                    hash="856f146c1b8b8301758cde821d78a752d66d5da4",
                    level="STATEMENT",
                    operation="DELETE",
                    pgid="pgtrigger_before_delete_delete_8f0bf",
                    referencing="REFERENCING OLD TABLE AS old_values ",
                    table="tests_eventmodelstatement",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="eventmodelstatementevent",
            trigger=pgtrigger.compiler.Trigger(
                name="append_only",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="RAISE EXCEPTION 'pgtrigger: Cannot update or delete rows from % table', TG_TABLE_NAME;",
                    hash="2de6a41a6a37d02cf8c5477601a50516e4e9fb98",
                    operation="UPDATE OR DELETE",
                    pgid="pgtrigger_append_only_859aa",
                    table="tests_eventmodelstatementevent",
                    when="BEFORE",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="nopghobjeventstatement",
            trigger=pgtrigger.compiler.Trigger(
                name="append_only",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="RAISE EXCEPTION 'pgtrigger: Cannot update or delete rows from % table', TG_TABLE_NAME;",
                    hash="bbc9dd58ecd8a366691bba724fd66824dc9e9aad",
                    operation="UPDATE OR DELETE",
                    pgid="pgtrigger_append_only_46e0e",
                    table="tests_nopghobjeventstatement",
                    when="BEFORE",
                ),
            ),
        ),
    ]
